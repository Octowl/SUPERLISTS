---

- hosts: all

  sudo: yes

  vars:
      user: ubuntu
      host: "{{ inventory_hostname }}"
      site_folder: /home/{{ ansible_ssh_user }}/sites/{{ host }}
      source_folder: /home/{{ ansible_ssh_user }}/sites/{{ host }}/source
      virtualenv_folder: /home/{{ ansible_ssh_user }}/sites/{{ host }}/virtualenv
      settings_file: /home/{{ ansible_ssh_user }}/sites/{{ host }}/source/superlists/settings.py
      secret_key_file: /home/{{ ansible_ssh_user }}/sites/{{ host }}/source/superlists/secret_key.py

  tasks:
    - name: create directory structure if necessary
      file: path="{{ site_folder }}"/{{ item }}
            owner={{ user }}
            group={{ user }}
            mode=0775
            state=directory
      with_items:
         - database
         - static
         - virtualenv
         - source

    - name: get latest source
      git: repo=https://github.com/Octowl/SUPERLISTS.git
           dest={{ source_folder }}
           update=yes
           accept_hostkey=yes

    - name: make sure required packages are installed
      apt: pkg=nginx,git,python3,python3-pip state=present

    - name: make sure virtualenv is installed
      shell: pip3 install virtualenv

    - name: update virtualenv
      pip: requirements="{{ source_folder }}"/requirements.txt
           virtualenv="{{ virtualenv_folder }}"

    - name: update static files
      django_manage: command=collectstatic
                     app_path={{ source_folder }}
                     virtualenv={{ virtualenv_folder }}

    - name: update database
      django_manage: command=migrate
                     app_path={{ source_folder }}
                     virtualenv={{ virtualenv_folder }}

    - name: update debug settings
      lineinfile:
        dest={{ settings_file }}
        backrefs=yes
        regexp='^DEBUG = '
        line='DEBUG = False'

    - name: update template debug settings
      lineinfile:
        dest={{ settings_file }}
        backrefs=yes
        regexp='TEMPLATE_DEBUG = '
        line='TEMPLATE_DEBUG = False'

    - name: update allowed hosts
      lineinfile:
        dest={{ settings_file }}
        backrefs=yes
        regexp='ALLOWED_HOSTS = '
        line='ALLOWED_HOSTS = ["{{ host }}"]'

    - name: import secret key
      lineinfile:
        dest={{ settings_file }}
        line='from .secret_key import SECRET_KEY'

    - name: check if secret key exists
      stat: path={{ secret_key_file }}
      register: secret_key_stat

    - name: create secret key
      shell: echo `openssl rand -base64 50`
      register: secret_key
      when: not secret_key_stat.stat.exists

    - name: write secret key to file
      lineinfile:
        dest={{ secret_key_file }}
        create=yes
        regexp='^SECRET_KEY = '
        line="SECRET_KEY = '{{ secret_key.stdout }}'"
      when: not secret_key_stat.stat.exists

    - name: allow long hostnames in nginx
      lineinfile:
        dest=/etc/nginx/nginx.conf
        regexp='(\s+)#? ?server_names_hash_bucket_size'
        backrefs=yes
        line='\1server_names_hash_bucket_size 64;'


    - name: add nginx config to sites-available
      template: src=./nginx.conf.j2
                dest=/etc/nginx/sites-available/{{ host }}
      notify:
          - restart nginx

    - name: add symlink in nginx sites-enabled
      file: src=/etc/nginx/sites-available/{{ host }}
            dest=/etc/nginx/sites-enabled/{{ host }} state=link
      notify:
          - restart nginx 

    - name: write gunicorn init script
      template: src=./gunicorn-upstart.conf.j2
                dest=/etc/init/gunicorn-{{ host }}.conf
      notify:
          - restart gunicorn

    - name: make sure nginx is running
      service: name=nginx state=running

    - name: make sure gunicorn is running
      service: name=gunicorn-{{ host }} state=running

  handlers:
    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart gunicorn
      service: name=gunicorn-{{ host }} state=restarted
